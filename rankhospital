##Write a function called rankhospital that takes three arguments: the 2-character abbreviated name of a
##state (state), an outcome (outcome), and the ranking of a hospital in that state for that outcome (num).
##The function reads the outcome-of-care-measures.csv le and returns a character vector with the name
##of the hospital that has the ranking specied by the num argument. For example, the call
##rankhospital("MD", "heart failure", 5)
##would return a character vector containing the name of the hospital with the 5th lowest 30-day death rate
##for heart failure. The num argument can take values \best", \worst", or an integer indicating the ranking
##(smaller numbers are better). If the number given by num is larger than the number of hospitals in that
##state, then the function should return NA. Hospitals that do not have data on a particular outcome should
##be excluded from the set of hospitals when deciding the rankings.
##Handling ties. It may occur that multiple hospitals have the same 30-day mortality rate for a given cause
##of death. In those cases ties should be broken by using the hospital name

rankhospital <- function(state, outcome,num="best") {
  # Set Working Directory to where the data file is
  setwd("C:/D-Drive/Professional Development/Big Data/Coursera/Data Science Track/Intro to R Programming/Wk 4/Data")
  
  # Check if the Outcomes is Valid
  if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
    stop("invalid outcome")
  }
  
  data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
  
  # Check if the State is Valid
  states <- table(data$State)
  if (!state %in% names(states)) { 
    stop("invalid state")
  }
  
  ##Subset the state data
  datastate<-subset(data,State==state)
  
  if (outcome=="heart attack") {
    dataoutcome=datastate[,c(2,11)]  
  }
  else if (outcome=="heart failure") {
    dataoutcome=datastate[,c(2,17)]
  }
  else if (outcome=="pneumonia") {
    dataoutcome=datastate[,c(2,23)]
  }
    
  dataoutcome[,2]<-suppressWarnings(as.numeric(dataoutcome[,2]))
  
  dataoutcome<-subset(dataoutcome,!is.na(dataoutcome[2]))
  
  order<-order(dataoutcome[,2],dataoutcome[,1])
  
  if (length(order)<1){
    NA
  }
  else if (num=="best"){
    dataoutcome[order[1],1]
      }
  else if(num=="worst"){
    dataoutcome[order[length(order)],1]
  }
  else if(as.numeric(num)<=length(order)){
    dataoutcome[order[as.numeric(num)],1]
  }
  else {NA}
}
