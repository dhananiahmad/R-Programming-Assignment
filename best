##Write a function called best that take two arguments: the 2-character abbreviated name of a state and an
##outcome name. The function reads the outcome-of-care-measures.csv le and returns a character vector
##with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the specied outcome
##in that state. The hospital name is the name provided in the Hospital.Name variable. The outcomes can
##be one of \heart attack", \heart failure", or \pneumonia". Hospitals that do not have data on a particular
##outcome should be excluded from the set of hospitals when deciding the rankings.
##Handling ties. If there is a tie for the best hospital for a given outcome, then the hospital names should
##be sorted in alphabetical order and the rst hospital in that set should be chosen (i.e. if hospitals \b", \c",
##and \f" are tied for best, then hospital \b" should be returned).
##The function should use the following template.
##best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
##}
##The function should check the validity of its arguments. If an invalid state value is passed to best, the
##function should throw an error via the stop function with the exact message \invalid state". If an invalid
##outcome value is passed to best, the function should throw an error via the stop function with the exact
##message \invalid outcome".

best <- function(state, outcome) {
  # Set Working Directory to where the data file is
  setwd("C:/D-Drive/Professional Development/Big Data/Coursera/Data Science Track/Intro to R Programming/Wk 4/Data")
  
  # Check if the Outcomes is Valid
  if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
    stop("invalid outcome")
  }
  
  data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
  
  # Check if the State is Valid
  states <- table(data$State)
  if (!state %in% names(states)) { 
    stop("invalid state")
  }
  
  ##Subset the state data
  datastate<-subset(data,State==state)
  
  if (outcome=="heart attack") {
    dataoutcome=datastate[,c(2,11)]  
  }
  else if (outcome=="heart failure") {
    dataoutcome=datastate[,c(2,17)]
  }
  else if (outcome=="pneumonia") {
    dataoutcome=datastate[,c(2,23)]
  }
    
  dataoutcome[,2]<-as.numeric(dataoutcome[,2])
  
  dataoutcome<-subset(dataoutcome,!is.na(dataoutcome[2]))
  
  order<-order(dataoutcome[,2],dataoutcome[,1])
  
  if (length(order)>1){
    dataoutcome[order[1],1]
  }
  else {NA}
  
}
